searchState.loadedDescShard("drk", 0, "CLI-util structure\nCreate an alias record for provided Token ID.\nFetch all pukeys from the wallet.\nCreate and append a <code>Money::Fee</code> call to a given <code>Transaction</code>.\nAuxiliary function to apply <code>DaoFunction::Exec</code> call data to …\nAuxiliary function to apply <code>DaoFunction::Mint</code> call data to …\nAuxiliary function to apply <code>DaoFunction::Propose</code> call data …\nAuxiliary function to apply <code>DaoFunction::Vote</code> call data to …\nAppend data related to DAO contract transactions into the …\nAppend data related to Money contract transactions into …\nCreate and attach the fee call to given transaction.\nBroadcast a given transaction to darkfid and forward onto …\nCLI utility functions\nConfirm already imported DAO metadata into the wallet, and …\nCustom implementation of rusqlite::named_params! to use …\nWallet functionality related to Dao\nFetch known unspent balances from the wallet for the given …\nExecute a DAO transfer proposal.\nList DAO(s) imported in the wallet. If a name is given, …\nMint a DAO on-chain.\nCreate a DAO transfer proposal.\nCreate a DAO transfer proposal transaction.\nVote on a DAO proposal\nAuxiliary function to execute a request towards the …\nFetch default pubkey from the wallet.\nFetch default secret key from the wallet.\nWallet functionality related to Deployooor\nGenerate a new deploy authority keypair and place it into …\nCreate a feeless contract deployment transaction.\nAuxiliary function to derive <code>TokenAttributes</code> for provided …\nError codes\nCreate a token freeze transaction. Returns the transaction …\nReturns the argument unchanged.\nFlag indicating if fun stuff are enabled\nFetch all aliases from the wallet. Optionally filter using …\nFetch all aliases from the wallet, mapped by token id.\nQueries darkfid for currently configured block target time.\nFetch all coins and their metadata related to the Money …\nFetch provided contract specified token unspend balances …\nFetch a DAO given its bulla.\nFetch a DAO given its name.\nFetch a DAO proposal by its bulla.\nFetch all known DAO proposals from the wallet given a DAO …\nFetch all DAO secret keys from the wallet.\nFetch DAO Merkle trees from the wallet.\nAuxiliary function to fetch the current DAO Merkle trees …\nFetch all known DAOs from the wallet.\nRetrieve a deploy authority keypair given an index\nGet the last scanned block height and hash from the wallet.\nFetch all token mint authorities from the wallet.\nFetch all secret keys from the wallet.\nFetch the Money Merkle tree from the wallet.\nAuxiliary function to fetch the current Money Merkle tree …\nQueries darkfid for current best fork next height.\nFetch the Money nullifiers SMT from the wallet, as a map.\nFetch all known DAO proposalss from the wallet.\nGet a scanned block information record.\nRetrieve token by provided string. Input string represents …\nFetch provided token unspend balances from the wallet.\nFetch provided token unfrozen mint authority from the …\nQueries darkfid for a tx with given hash.\nQueries darkfid for given transaction’s gas.\nGet a transaction history record.\nFetch all transactions history records, excluding bytes …\nImport given DAO params into the wallet with a given name.\nImport a token mint authority into the wallet.\nImport given secret keys into the wallet. If the key …\nInitialize the first half of an atomic swap\nInitialize wallet with tables for the DAO contract.\nInitialize wallet with tables for the Deployooor contract.\nInitialize wallet with tables for the Money contract.\nInitialize wallet with tables for <code>Drk</code>.\nInspect and verify a given swap (half or full) transaction\nCalls <code>U::from(self)</code>.\nCreate a full transaction by inspecting and verifying …\nList contract deploy authorities from the wallet\nCreate a feeless contract redeployment lock transaction.\nTry to fetch zkas bincodes for the given <code>ContractId</code>.\nMark a coin in the wallet as spent, and store its inverse …\nMarks all coins in the wallet as spent, if their nullifier …\nMark provided transaction input coins as spent.\nCreate a token mint transaction. Returns the transaction …\nWallet functionality related to Money\nFetch known unspent balances from the wallet and return …\nAuxiliary function to  grab all the nullifiers from a …\nGenerate a new keypair and place it into the wallet.\nAuxiliary function to parse a <code>MONEY_COINS_TABLE</code> record. …\nAuxiliary function to parse a proposal record row.\nAuxiliary function to parse a <code>DAO_DAOS_TABLE</code> record.\nAuxiliary function to parse a <code>MONEY_TOKENS_TABLE</code> records. …\nAuxiliary function to grab all the nullifiers, coins, …\nAuxiliary function to ping configured darkfid daemon for …\nImport given DAO proposal into the wallet, and store its …\nReplace the DAO Merkle trees in the wallet.\nImport given DAO vote into the wallet, and store its …\nReplace the Money Merkle tree in the wallet.\nInsert a scanned block information record into the wallet.\nInsert or update a <code>Transaction</code> history record into the …\nInsert or update a slice of <code>Transaction</code> history records …\nRemove provided alias record from the wallet database.\nAuxiliary function to completely reset wallet state.\nReset all DAO proposals in the wallet.\nReset the DAO Merkle trees in the wallet.\nReset all DAO votes in the wallet.\nReset confirmed DAOs in the wallet.\nAuxiliary function to reset <code>walletdb</code> inverse cache state. …\nReset all token mint authorities frozen status in the …\nReset the Money coins in the wallet.\nReset the Money nullifiers Sparse Merkle Tree in the …\nReset the Money Merkle tree in the wallet.\nReset the scanned blocks information records in the wallet.\nReset state to provided block height. If genesis block …\nReset the transaction history records in the wallet.\ndarkfid JSON-RPC related methods\nJSON-RPC client to execute requests to darkfid daemon\n<code>scan_block</code> will go over over transactions in a block and …\nScans the blockchain for wallet relevant transactions, …\nWallet functionality related to scanned blocks\nSet provided index address as default in the wallet.\nSign given swap transaction by retrieving the secret key …\nSimulate the transaction with the state machine.\nInserts given slice to the wallets nullifiers Sparse …\nAuxiliary function to stop current JSON-RPC client, if its …\nAuxiliary function to store current <code>walletdb</code> inverse cache …\nSubscribes to darkfid’s JSON-RPC notification endpoint …\nSwap methods\nToken methods\nPayment methods\nCreate a payment transaction. Returns the transaction …\nWallet functionality related to transactions history\nUnconfirm imported DAO proposals by removing the leaf …\nMark a given coin in the wallet as unspent.\nWallet database operations handler\nWallet database operations handler\nAuxiliary function to generate provided shell completions.\nFun police go away\nAuxiliary function to parse provided string into a tokens …\nAuxiliary function to parse a base64 encoded transaction …\nAuxiliary function to parse provided string into a values …\nParameters representing a DAO to be initialized\nStructure representing a <code>DAO_DAOS_TABLE</code> record.\nStructure representing a <code>DAO_PROPOSALS_TABLE</code> record.\nStructure representing a <code>DAO_VOTES_TABLE</code> record.\nBlinding facfor of all votes\nValue of all votes\nThe call index in the transaction where the DAO was …\nThe call index in the transaction where the proposal was …\nCall index in the transaction where this vote was casted\nThe on chain representation of the DAO\nPlaintext proposal call data the members share between them\nThe transaction hash where the proposal was executed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNumeric identifier for the vote\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeaf position of the DAO in the Merkle tree of DAOs\nLeaf position of the proposal in the Merkle tree of …\nMoney merkle tree snapshot for reproducing the snapshot …\nName identifier for the DAO\nVote input nullifiers\nMoney nullifiers SMT snapshot for reproducing the snapshot …\nDAO parameters\nThe on chain representation of the proposal\nBulla identifier of the proposal this vote is for\nSecret key for the DAO\nThe transaction hash where the DAO was deployed\nThe transaction hash where the proposal was deployed\nTransaction hash where this vote was casted\nThe vote\nBlinding factor for the yes vote\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nCustom wallet database errors available for drk. Please …\nResult type used in the wallet database module\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHalf of the swap data, includes the coin that is supposed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStructure representing base wallet database operations.\nWallet SMT definition\nAn SMT adapter for wallet SQLite database storage.\nAuxiliary function to store provided inverse query into …\nAuxiliary function to clear inverse queries cache.\nConnection to the SQLite database.\nGenerate a new statement for provided query and bind the …\nThis function executes a given SQL query that contains …\nThis function executes a given SQL query, but isn’t able …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a <code>SELECT</code> query for provided table from selected …\nAuxiliary function to retrieve cached inverse queries into …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverse queries cache, in case we want to rollback …\nCreate a new wallet database handler. If <code>path</code> is <code>None</code>, …\nQuery provided table using provided query for multiple …\nQuery provided table from selected column names and …\nQuery provided table from selected column names and …")